import 'dart:io';
import 'package:args/args.dart';
import 'package:generate_xml_csv/generate_xml_csv.dart';
import 'package:xml/xml.dart';

const folderPath = 'folder';
const xmlPathFile = 'xml';
const mapFile = 'map';
const csvFile = 'csv';
const xmlTags = 'tags';
const help = 'help';

ArgResults argResults;

void main(List<String> arguments) {
  exitCode = 0; // presume success
  final parser = ArgParser()
    ..addOption(xmlPathFile, abbr: 'x')
    ..addOption(csvFile, abbr: 'c', defaultsTo: 'config/campos_excel.csv')
    ..addOption(mapFile, abbr: 'm', defaultsTo: 'config/mapping.txt')
    ..addOption(folderPath, abbr: 'f')
    ..addOption(xmlTags, abbr: 't', defaultsTo: 'config/tags.txt')
  ..addFlag(help, negatable: false, abbr: 'h');

  argResults = parser.parse(arguments);

  dcat(argResults[xmlPathFile] ,argResults[mapFile], argResults[folderPath] ,argResults[csvFile], argResults[xmlTags], argResults[help] as bool);
}

Future dcat(xmlPathFile, mapFile, folderPath, csvFile, xmlTags, help) async {
  if (help){
    stdout.write('''
    ********************************
    Ayuda sobre el uso del programa
    ********************************
    uso:
      .\\generateXml.exe -x [-c|-m|-t] [-h]
     
    flags:
      -h    Show help
      --help
      
    options:
      -x        path of xml file.
      --xml     Ej: -x 'XML/SolCred_P1.xml'
      
      -c        path of cvs file.
      --csv     Ej: -c 'campos.csv'
      
      -m        path of map file.
      --map     Ej: -m 'mapping.txt'
      
      -f        path of the folder with only xml files inside.
      --folder  Ej: -f 'XML'
     
     Generated by marteaga@logiciel-ec.com
    ''');
    exit(0);
  }  if(xmlPathFile==null && folderPath==null){
    stderr.writeln('error: Las opciones --xml --csv and --map deben apuntar a archivos válidos '
        'con sus correspondientes archivos.\n Ejecute el programa con la opción -h para ver la ayuda.');
    exit(2);
  }else{
   if(folderPath != null){
       var lister = Directory(folderPath).list(recursive: false);
       lister.listen((file) =>
       {
         print('Processing...\n'
             'xmlFile:\t $file\n'
             'mapFile:\t $mapFile\n'
             'cvsFile:\t $csvFile\n'
             'xmlTags:\t $xmlTags\n'),
         generateXMLFile(csvFile, mapFile, file.path, xmlTags)},
           onDone: () => print("\nTarea finalizada"),
        onError: () => print("\n ERROR: Se a producido un error en la lectura de los archivos de la capeta $lister"));
   }   else {
     print('Processing...\n'
         'xmlFile:\t $xmlPathFile\n'
         'mapFile:\t $mapFile\n'
         'cvsFile:\t $csvFile\n'
         'xmlTags:\t $xmlTags\n');
     generateXMLFile(csvFile, mapFile, xmlPathFile, xmlTags);
   }
  }
}
